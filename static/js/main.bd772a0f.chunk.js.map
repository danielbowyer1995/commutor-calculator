{"version":3,"sources":["stores/list-store.js","stores/travel.store.js","stores/form.store.js","utils/calculator.utils.js","components/input-form/input-form.component.jsx","components/travel-details/travel-details.component.jsx","components/travel-summary/travel-summary.component.jsx","components/my-list/my-list.component.jsx","pages/home/home.component.jsx","App.js","index.js"],"names":["ListStore","observable","myList","TravelStore","show","homeLocation","nearestDestinationStation","nearestHomeStation","FormStore","showDropDown","dailyTravelSpend","dailyTravelTime","destinationPostCode","destinationDetails","destinationCoords","longitude","latitude","nearestDestinationStations","homePostCode","homeDetails","homeCoords","nearestHomeStations","API_KEY","getDestination","a","axios","get","then","res","data","result","catch","err","console","log","getHomeLocation","admin_district","InputForm","event","target","value","name","input","preventDefault","postcodeValidator","headers","results","className","onSubmit","action","this","handleSubmit","type","onChange","handleChange","label","required","length","id","onClick","getDestinationStations","map","station","i","getHomeStations","Component","observer","props","trainTime","trainCost","carTime","carCost","location","MyList","dailyTrainTime","dailyTrainSpend","dailyCarTime","dailyCarSpend","Home","push","clone","pushToMyList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd772a0f.chunk.js","sourcesContent":["import { observable } from 'mobx'\n\nconst ListStore = observable({\n    myList: [],\n})\n\nexport default ListStore","import {observable} from 'mobx'\n\nconst TravelStore = observable({\n    show: false,\n    homeLocation: '',\n    nearestDestinationStation: '',\n    nearestHomeStation: '',\n\n})\nexport default TravelStore","import { observable } from 'mobx'\n\nconst FormStore = observable({\n    show: false,\n    showDropDown: false,\n    dailyTravelSpend: 0,\n    dailyTravelTime: 0,\n    destinationPostCode: '',\n    destinationDetails: {},\n    destinationCoords: {\n        longitude: '',\n        latitude: ''\n    },\n    nearestDestinationStations: [],\n    homePostCode: '',\n    homeDetails: {},\n    homeCoords: {\n        longitude: '',\n        latitude: '',\n    },\n    nearestHomeStations: [],\n})\n\nexport default FormStore","import axios from 'axios'\nimport {postcodeValidator} from 'postcode-validator'\n\nimport FormStore from '../stores/form.store'\nimport TravelStore from '../stores/travel.store'\n\nconst API_KEY = 'AIzaSyBWgP_gLfTd_jhIMApFTQiVuE9Asm_NU-I'\n\nexport async function validatePostCode(postCode) {\n    if (postcodeValidator(postCode, 'GB') === true) {\n        TravelStore.show = true\n    }\n    else {\n        alert(`The postcode: ${postCode} does not exist. Please enter a valid postcode`)\n        TravelStore.show = false\n    }\n}\n\nexport async function getDestination(){\n    let destinationPostCode = FormStore.destinationPostCode\n    axios.get(`https://api.postcodes.io/postcodes/${destinationPostCode}`)\n        .then(res => {\n            FormStore.destinationCoords.latitude = res.data.result.latitude\n            FormStore.destinationCoords.longitude = res.data.result.longitude\n        })\n        .catch(err => console.log(err))\n}\n\nexport async function getHomeLocation(){\n    let homePostCode = FormStore.homePostCode\n    axios.get(`https://api.postcodes.io/postcodes/${homePostCode}`)\n        .then(res => {\n            TravelStore.homeLocation = res.data.result.admin_district\n            FormStore.homeCoords.latitude = res.data.result.latitude\n            FormStore.homeCoords.longitude = res.data.result.longitude\n        })\n        .catch(err => console.log(err))\n}\n\nexport function getNearestHomeStations(){\n    axios.get(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${FormStore.homeCoords.latitude},${FormStore.homeCoords.longitude}&radius=5000&type=train_station&key=${API_KEY}`,{\n        headers: {\n        'Access-Control-Allow-Origin' : '*',\n        'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS',}})\n        .then(res => {\n            TravelStore.nearestHomeStation = res.data.results\n            console.log(TravelStore.nearestHomeStation)\n        })\n}\n\nexport function getNearestDestinationStations(){\n    axios.get(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${FormStore.destinationCoords.latitude},${FormStore.destinationCoords.longitude}&radius=5000&type=train_station&key=${API_KEY}`,{\n        headers: {\n        'Access-Control-Allow-Origin' : '*',\n        'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS',}})\n        .then(res => {\n            TravelStore.nearestDestinationStation = res.data.results\n            console.log(TravelStore.nearestHomeStation)\n        })\n}\n\n","import { observer } from 'mobx-react';\nimport { action } from 'mobx'\nimport React, { Component } from 'react'\n\nimport FormStore from '../../stores/form.store'\nimport { getDestination, getHomeLocation, getNearestHomeStations, getNearestDestinationStations } from '../../utils/calculator.utils'\n\nimport './input-form.styles.scss'\nimport TravelStore from '../../stores/travel.store';\nimport { postcodeValidator } from 'postcode-validator';\n\nclass InputForm extends Component {\n    \n    handleChange(event) {\n        const { value, name } = event.target\n        let input = value;\n        FormStore[name] = input\n        return input\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        postcodeValidator(FormStore.destinationPostCode, 'GB')\n        postcodeValidator(FormStore.homePostCode, 'GB')\n        TravelStore.show = true\n    }\n\n    async getDestinationStations(){\n        await getDestination();\n        getNearestDestinationStations()\n    }\n\n    async getHomeStations(){\n        await getHomeLocation();\n        getNearestHomeStations()\n    }\n\n    render(){\n        return(\n            <div className='input-form'>\n                <form className='form-fields' onSubmit={action(this.handleSubmit)}>\n                    <label>Daily Travel Spend Budget</label>\n                    <input\n                        className='input-number' \n                        type='number' \n                        name='dailyTravelSpend'\n                        value={this.input}\n                        onChange={action(this.handleChange)}\n                        label='DAILY TRAVEL SPEND'\n                        required\n                    />\n                    <label>Daily Travel Time Budget</label>\n                    <input \n                        className='input-number' \n                        type='number' \n                        name='dailyTravelTime'\n                        value={this.input}\n                        onChange={action(this.handleChange)}\n                        label='DAILY TRAVEL TIME'\n                        required\n                    />\n                    <label>Destination Postcode</label>\n                    <input \n                        className='input-text'\n                        type='text' \n                        name='destinationPostCode'\n                        value={this.input}\n                        onChange={action(this.handleChange)}\n                        label='DESTINATION POST CODE'\n                        required\n                    />\n                    {\n                        FormStore.destinationPostCode.length < 6 ? null\n                        :\n                        <button type='button' id='get-nearest-destination-stations' \n                            onClick={() => this.getDestinationStations()}> \n                            Find Nearest Stations\n                        </button>\n                    }\n                    {\n                        !TravelStore.nearestDestinationStation.length ? null\n                        :\n                        <div>\n                            <select>\n                                {TravelStore.nearestDestinationStation.map((station, i) => (\n                                    <option key={i} value={station.name}>{station.name}</option>\n                                ))}\n                            </select>\n                        </div>\n                    }   \n                    <label>New Home Postcode</label>\n                    <input \n                        className='input-text'\n                        type='text' \n                        name='homePostCode'\n                        value={this.input}\n                        onChange={action(this.handleChange)}\n                        label='NEW HOME POSTCODE'\n                        required\n                    />\n                    {\n                        FormStore.homePostCode.length < 6 ? null\n                        :\n                        <button type='button' id='get-nearest-home-stations' \n                            onClick={() => this.getHomeStations()}> \n                            Find Nearest Stations\n                        </button>\n                    }\n                    {\n                        !TravelStore.nearestHomeStation.length ? null\n                        :\n                        <div>\n                            <select>\n                                {TravelStore.nearestHomeStation.map((station, i) => (\n                                    <option key={i} value={station.name}>{station.name}</option>\n                                ))}\n                            </select>\n                        </div>\n                    }   \n                    <input className='submit-button' type='submit' value='SUBMIT' />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default observer(InputForm)\n\n// onClick={() => this.findLocation(FormStore.homePostCode)}","import { observer } from 'mobx-react'\nimport React from 'react'\nimport TravelStore from '../../stores/travel.store'\n\n\nimport './travel-details.styles.scss'\n\nconst TravelDetails = (props) => {\n    return(\n        \n        <div>\n            {/* add If component conditional in here */}\n            {\n                !TravelStore.show ? null\n                :\n                <div className='location-details'>\n                    <h3>Location: {props.homeLocation}</h3>\n                    <span className='option'>Train travel time: {props.trainTime} mins</span>\n                    <span className='option'>Train travel cost: £{props.trainCost}</span>\n                    <span className='option'>Car travel time: {props.carTime} mins</span>\n                    <span className='option'>Car travel cost: £{props.carCost}</span>\n                    {/* <button>Add to list</button> */}\n                </div>\n            }\n        </div>\n    )\n}\n\n// class TravelDetails extends Component {\n\n//     constructor(){\n//         super();\n\n//         this.state = {\n//             trainTime: 0,\n//             trainCost: 0,\n//             carTime: 0,\n//             carCost: 0,\n//             homePostcode: '',\n//         }\n//     }\n\n//     render(){\n//         return(\n//             <div className='location-details'>\n//                 \n//             </div>\n//         )\n//     }\n// }\n\nexport default observer(TravelDetails)","import React from 'react'\nimport { observer } from 'mobx-react'\n\nconst TravelSummary = (props) => {\n    return(\n        <div className='location-details'>\n            <span className='option-bold'>Location: {props.location}</span>\n            <span className='option'>Train travel time: {props.trainTime} mins</span>\n            <span className='option'>Train travel cost: £{props.trainCost}</span>\n            <span className='option'>Car travel time: {props.carTime} mins</span>\n            <span className='option'>Car travel cost: £{props.carCost}</span>\n            {/* <button>Add to list</button> */}\n        </div>\n    )\n}\n\nexport default observer(TravelSummary)","import { observer } from 'mobx-react';\nimport React, { Component } from 'react'\n\nimport './my-list.styles.scss'\n\nimport ListStore from '../../stores/list-store'\n\nimport TravelSummary from '../travel-summary/travel-summary.component'\n\n\nclass MyList extends Component {    \n\n    render(){\n        console.log(ListStore.myList)\n        return(\n            <div>\n                {ListStore.myList.map((location, i) => \n                    <div className='list-item' key={`myList${i}`}>\n                        <TravelSummary \n                            location={location.homeLocation}\n                            trainTime={location.dailyTrainTime}\n                            trainCost={location.dailyTrainSpend}\n                            carTime={location.dailyCarTime}\n                            carCost={location.dailyCarSpend}\n                        />\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default observer(MyList) \n","import React, { Component } from 'react'\nimport { observer } from 'mobx-react'\nimport { action } from 'mobx'\nimport clone  from 'lodash/cloneDeep'\n\nimport './home.styles.scss'\n\nimport ListStore from '../../stores/list-store'\nimport TravelStore from '../../stores/travel.store'\n\nimport InputForm from '../../components/input-form/input-form.component'\nimport TravelDetails from '../../components/travel-details/travel-details.component'\nimport MyList from '../../components/my-list/my-list.component'\n\n// const api = axios.create({\n//     baseURL: 'api.postcodes.io/postcodes/br14dq'\n// })\n\n\nclass Home extends Component {\n\n    // componentDidMount(){\n    //     let postCode = 'BR14DQ'\n    //     axios.get(`https://api.postcodes.io/postcodes/${postCode}`)\n    //     .then(res => {\n    //         TravelStore.homeLocation = res.data.admin_district\n    //         console.log(res.data.admin_district)\n    //     })\n    // }\n    \n    pushToMyList(location){\n        action(ListStore.myList.push(clone(location)))\n    }\n\n    // componentDidMount(){\n    //     fetch('api.postcodes.io/postcodes/br14dq')\n    //         .then(response => response.json())\n    //         .then(data => console.log(data))\n    // }\n    \n    render(){\n        return(\n            <div>\n                <h1>Commuter Calculator</h1>\n                <div className='home-grid'>\n                <div className='your-details'>\n                    <h1>Your Details</h1>\n                    <InputForm />\n                    <TravelDetails\n                        homeLocation={TravelStore.homeLocation}\n                        trainTime={0}\n                        trainCost={0}\n                        carTime={0}\n                        carCost={0}\n                    />\n                    {/* eslint-disable-next-line */}\n                    {\n                        !TravelStore.show ? null\n                        :\n                        <button onClick={action(() => this.pushToMyList(TravelStore), () => console.log(ListStore.myList))}>Add to my list</button>\n                    }\n                </div>\n                <div className='my-list'>\n                    <h1>My List</h1>\n                    <MyList/>\n                </div>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default observer(Home)","import './App.css';\n\nimport Home from './pages/home/home.component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}